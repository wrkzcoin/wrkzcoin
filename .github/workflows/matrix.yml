name: Build
on:
  push:
  pull_request:
  release:
    types: [published]
  schedule:
    - cron: '30 3 * * 0'

env:
  TAG: ${{ github.ref }}

jobs:
  # Common Build matrix for builds on Ubuntu VM
  ubuntu_build:
    name: ${{ matrix.build_name }}
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix:
        # Add more compilers here if you need them
        build_name: ['Ubuntu GCC 7', 'Ubuntu GCC 8', 'Ubuntu Clang 6', 'aarch64']
        include:
          - build_name: 'Ubuntu GCC 7'
            package_name: 'gcc-7 g++-7'
            cc: gcc-7
            cxx: g++-7
            label: linux-gcc-7
            deployable: false
          - build_name: 'Ubuntu GCC 8'
            package_name: 'gcc-8 g++-8'
            cc: gcc-8
            cxx: g++-8
            label: linux
            deployable: true
          - build_name: 'Ubuntu Clang 6'
            cc: clang-6.0
            cxx: clang++-6.0
            label: linux-clang-6
            deployable: false
          - build_name: 'aarch64'
            label: aarch64
            deployable: true
    env:
      CCACHE_DIR: $GITHUB_WORKSPACE/.ccache
      LABEL: ${{ matrix.label }}
    steps:
      - uses: actions/checkout@v1

      # Fetch Dependencies
      - name: Dependencies
        if: matrix.build_name != 'aarch64'
        run: |
          sudo apt update
          sudo apt install -y libboost-all-dev libssl-dev ${{ matrix.package_name }}

      - name: Setup ccache
        run: |
          sudo apt install ccache

      - name: Retrieve ccache
        uses: actions/cache@v1
        with:
          path: .ccache
          key: ccache-${{ matrix.label }}

      # Configure the project with cmake
      - name: Configure
        if: matrix.build_name != 'aarch64'
        env:
          CC: ${{ matrix.cc }}
          CXX: ${{ matrix.cxx }}
        run: |
          mkdir build && cd build
          cmake -DARCH=default -DCMAKE_BUILD_TYPE=Release -DSTATIC=true ..

      # Build for linux
      - name: Build
        if: matrix.build_name != 'aarch64'
        run: |
          cd build
          make -j2

      # Build for aarch64
      - name: Prepare and Build (aarch64)
        if: matrix.build_name == 'aarch64'
        run: |
          source scripts/prep-aarch64.sh
          mkdir build && cd build
          cmake -DARCH=default -DCMAKE_BUILD_TYPE=Release -DSTATIC=true ..
          make -j2
          cd src
          TARGETS="Wrkzd miner wrkz-wallet wrkz-service cryptotest wrkz-wallet-api wallet-upgrader"
          ${STRIP} ${TARGETS}

      # Test the crypto
      - name: Test Crypto
        if: matrix.build_name != 'aarch64'
        run: |
          cd build/src
          ./cryptotest

      # Prepare for deploy
      - name: Prepare for Deploy
        id: before_deploy
        env:
          COMMIT_SHA: ${{ github.sha }}
        run: |
          if [[ "${TAG:5:4}" == "tags" ]]; then export TAG=${TAG:10}; else export TAG=${COMMIT_SHA}; fi
          cd build/src
          TARGETS="Wrkzd miner wrkz-wallet wrkz-service cryptotest wrkz-wallet-api wallet-upgrader"
          if [[ "${LABEL}" != "aarch64" ]]; then strip ${TARGETS}; fi
          rm -rf wrkzcoin-${TAG}
          mkdir wrkzcoin-${TAG}
          cp ${TARGETS} wrkzcoin-${TAG}/
          cp ../../LICENSE wrkzcoin-${TAG}/
          DATE_WITH_TIME=`date "+%Y%m%d-%H%M"`
          tar cvfz wrkzcoin-${DATE_WITH_TIME}-${TAG}-${LABEL}.tar.gz wrkzcoin-${TAG}/
          rm -rf builds
          mkdir builds
          cp wrkzcoin-${DATE_WITH_TIME}-${TAG}-${LABEL}.tar.gz builds/
          echo ::set-output name=file_name::wrkzcoin-${DATE_WITH_TIME}-${TAG}-${LABEL}.tar.gz

      # Upload to FTP
      - name: FTP-Deploy-Action
        uses: SamKirkland/FTP-Deploy-Action@2.0.0
        env:
          FTP_SERVER: ${{ secrets.FTP_SERVER }}
          FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
          METHOD: ${{ secrets.FTP_METHOD }}
          PORT: ${{ secrets.FTP_PORT }}
          LOCAL_DIR: ./build/src/builds
          ARGS: --include-glob=*.zip --include-glob=*.tar.gz 

  # Mac builds on Catalina VM
  macos_build:
    name: macOS
    runs-on: macOS-latest
    env:
      CC: /usr/local/opt/llvm@8/bin/clang
      CXX: /usr/local/opt/llvm@8/bin/clang++
      LABEL: osx
      CCACHE_DIR: $GITHUB_WORKSPACE/.ccache
    steps:
      - uses: actions/checkout@v1

      # Fetch Dependencies
      - name: Dependencies
        run: |
          brew install --force boost llvm@8 ccache
          brew link --force llvm@8
          ln -s /usr/local/opt/llvm@8 /usr/local/opt/llvm

      - name: Retrieve ccache
        uses: actions/cache@v1
        with:
          path: .ccache
          key: ccache-osx

      # Configure project with cmake
      - name: Configure
        run: |
          mkdir build && cd build
          cmake -DARCH=default -DCMAKE_BUILD_TYPE=Release -DSTATIC=true ..

      # Build for macOS
      - name: Build
        run: |
          cd build
          make -j2

      # Test the crypto
      - name: Test Crypto
        if: matrix.build_name != 'aarch64'
        run: |
          cd build/src
          ./cryptotest

      # Prepare for deploy
      - name: Prepare for Deploy
        id: before_deploy
        env:
          COMMIT_SHA: ${{ github.sha }}
        run: |
          if [[ "${TAG:5:4}" == "tags" ]]; then export TAG=${TAG:10}; else export TAG=${COMMIT_SHA}; fi
          cd build/src
          TARGETS="Wrkzd miner wrkz-wallet wrkz-service cryptotest wrkz-wallet-api wallet-upgrader"
          strip ${TARGETS}
          rm -rf wrkzcoin-${TAG}
          mkdir wrkzcoin-${TAG}
          cp ${TARGETS} wrkzcoin-${TAG}/
          cp ../../LICENSE wrkzcoin-${TAG}/
          DATE_WITH_TIME=`date "+%Y%m%d-%H%M"`
          tar cvfz wrkzcoin-${DATE_WITH_TIME}-${TAG}-${LABEL}.tar.gz wrkzcoin-${TAG}/
          rm -rf builds
          mkdir builds
          cp wrkzcoin-${DATE_WITH_TIME}-${TAG}-${LABEL}.tar.gz builds/
          echo ::set-output name=file_name::wrkzcoin-${DATE_WITH_TIME}-${TAG}-${LABEL}.tar.gz

      # Upload to FTP
      - name: FTP-Deploy-Action
        uses: SamKirkland/FTP-Deploy-Action@2.0.0
        env:
          FTP_SERVER: ${{ secrets.FTP_SERVER }}
          FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
          METHOD: ${{ secrets.FTP_METHOD }}
          PORT: ${{ secrets.FTP_PORT }}
          LOCAL_DIR: ./build/src/builds
          ARGS: --include-glob=*.zip --include-glob=*.tar.gz 

  # Windows Builds on Windows Server 2019
  windows_build:
    name: Windows
    runs-on: windows-2019
    env:
      MSBUILD_PATH: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/MSBuild/Current/Bin"
      LABEL: windows
    steps:
      - uses: actions/checkout@v1

      - name: Setup clcache
        run: pip install clcache

      - name: Retrieve clcache
        uses: actions/cache@v1
        with:
          path: clcache
          key: clcache-windows

      # Configure project with cmake
      - name: Configure
        run: |
          mkdir build
          cd build
          cmake -G "Visual Studio 16 2019" -A x64 .. -DARCH=default -DCMAKE_BUILD_TYPE=Release -DSTATIC=true -DOPENSSL_ROOT_DIR="C:\Strawberry\c\"

      # Build for Windows
      - name: Build
        run: |
          $env:CLCACHE_DIR = "$env:GITHUB_WORKSPACE\clcache"
          $env:PATH = "$env:PATH;$env:MSBUILD_PATH"
          cd build
          MSBuild WrkzCoin.sln /p:CLToolExe=clcache.exe /p:CLToolPath=c:\hostedtoolcache\windows\Python\3.6.8\x64\Scripts\ /p:Configuration=Release /m

      # Test the crypto
      - name: Test Crypto
        shell: bash
        run: |
          cd build/src/Release
          ./cryptotest.exe

      # Prepare for deploy
      - name: Prepare for Deploy
        shell: bash
        id: before_deploy
        env:
          COMMIT_SHA: ${{ github.sha }}
        run: |
          if [[ "${TAG:5:4}" == "tags" ]]; then export TAG=${TAG:10}; else export TAG=${COMMIT_SHA}; fi
          cd build/src/Release
          rm -rf wrkzcoin-${TAG}
          mkdir wrkzcoin-${TAG}
          cp *.exe wrkzcoin-${TAG}/
          cp ../../../LICENSE wrkzcoin-${TAG}/
          DATE_WITH_TIME=`date "+%Y%m%d-%H%M"`
          7z a wrkzcoin-${DATE_WITH_TIME}-${TAG}-${LABEL}.zip wrkzcoin-${TAG}/
          rm -rf builds
          mkdir builds
          cp wrkzcoin-${DATE_WITH_TIME}-${TAG}-${LABEL}.zip builds/
          echo ::set-output name=file_name::wrkzcoin-${DATE_WITH_TIME}-${TAG}-${LABEL}.zip

      # Upload to FTP
      - name: FTP-Deploy-Action
        uses: SamKirkland/FTP-Deploy-Action@2.0.0
        env:
          FTP_SERVER: ${{ secrets.FTP_SERVER }}
          FTP_USERNAME: ${{ secrets.FTP_USERNAME }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
          METHOD: ${{ secrets.FTP_METHOD }}
          PORT: ${{ secrets.FTP_PORT }}
          LOCAL_DIR: ./build/src/Release/builds
          ARGS: --include-glob=*.zip --include-glob=*.tar.gz 
